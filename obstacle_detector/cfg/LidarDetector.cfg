#!/usr/bin/env python
PACKAGE = "obstacle_detector"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

gen.add("splitAndMerge_", bool_t, 0, "Iterative End Point Fit (false) / Split And Merge (true)", True)
gen.add("circlesFromVisibles_", bool_t, 0, "Detect circular obstacles only from fully visible segments", True)
gen.add("discardConvertedSegments_", bool_t, 0, "Not publish segments, from which the circles were spawned", True)
gen.add("transformCoordinates_", bool_t, 0, "Transform the coordinates of obstacles to frame_id parameter", True)
gen.add("minGroupPoints_", int_t, 0, "Minimum points comprising a group to be further processed", 5, 3, 15)
gen.add("minRange_", double_t, 0, "Min scan range", 0.15, 0.1, 1)
gen.add("maxRange_", double_t, 0, "Max scan range", 5, 1, 12)
gen.add("maxGroupDistance_", double_t, 0, "If distance between 2 points is greater, start a new group", 0.1, 0.05, 1)
gen.add("distanceProportion_", double_t, 0, "Allowable distance between points proportionally", 0.00628, 0.001, 0.5)
gen.add("maxSplitDistance_", double_t, 0, "Split group if a point lays further from leading line", 0.2, 0.05, 0.5)
gen.add("maxMergeSeparation_", double_t, 0, "Consider merge obstacle if distance smaller", 0.2, 0.05, 0.5)
gen.add("maxMergeSpread_", double_t, 0, "Merge segments if all extreme points lay closer to the leading line", 0.2, 0.05, 0.5)
gen.add("maxCircleRadius_", double_t, 0, "Skip a circle have greater radius", 0.6, 0.1, 1.5)
gen.add("radiusEnlargement_", double_t, 0, "Artificially enlarge the circles radius by this value", 0.25, 0.1, 1)

exit(gen.generate(PACKAGE, "LidarDetectorNode", "LidarDetector"))
